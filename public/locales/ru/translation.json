{
    "header": {
        "welcome": "Страница приветствия",
        "main": "Главная страница",
        "signIn": "Войти",
        "signUp": "Подписаться",
        "logOut": "Выйти"
    },
    "section1": {
        "describe": "Описывайте свои данные",
        "ask": "Запрашивайте что хотите",
        "get": "Получайте предсказуемый результат",
        "start": "Начать"
    },
    "section2": {
        "clone": "GraphiQL Клон"
    },
    "section3": {
        "title1": "Язык запросов для вашего API",
        "text1": "GraphQL — это язык запросов для API и среда выполнения для этих запросов с вашими существующими данными. GraphQL предоставляет полное и понятное описание данных в вашем API, дает клиентам возможность запрашивать именно то, что им нужно, и ничего больше, упрощает развитие API с течением времени и предоставляет мощные инструменты разработчика.",
        "title2": "Запросите что вам необходимо и получите именно это",
        "text2": "Отправьте запрос GraphQL в свой API и получите именно то, что вам нужно, не больше и не меньше. Запросы GraphQL всегда возвращают предсказуемые результаты. Приложения, использующие GraphQL, работают быстро и стабильно, потому что они контролируют получаемые данные, а не сервер."
    },
    "section4": {
        "title1": "Получайте много ресурсов",
        "title2": "в одном запросе",
        "text": "Запросы GraphQL обращаются не только к свойствам одного ресурса, но и следуют ссылкам между ними. В то время как типичные API REST требуют загрузки с нескольких URL-адресов, API GraphQL получают все данные, необходимые вашему приложению, в одном запросе. Приложения, использующие GraphQL, могут работать быстро даже при медленном подключении к мобильной сети."
    },
    "section5": {
        "title1": "Опишите, что возможно с системой типов",
        "text1": "API-интерфейсы GraphQL организованы по типам и полям, а не по конечным точкам. Получите доступ ко всем возможностям ваших данных из единой конечной точки. GraphQL использует типы, чтобы приложения запрашивали только то, что возможно, и предоставляли четкие и полезные ошибки. Приложения могут использовать типы, чтобы не писать код синтаксического анализа вручную.",
        "title2": "Двигайтесь быстрее с помощью мощных инструментов разработчика",
        "text2": "Точно узнайте, какие данные вы можете запросить из своего API, не выходя из редактора, выделите потенциальные проблемы перед отправкой запроса и воспользуйтесь преимуществами улучшенного анализа кода. GraphQL позволяет легко создавать мощные инструменты, такие как GraphiQL, используя систему типов вашего API"
    },
    "developers": {
        "team": "Наша команда",
        "oolenka": "Ольга Золоторёва",
        "svetik": "Светлана Клевцова",
        "alisa": "Ольга Гайдук",
        "lead": "Руководитель команды",
        "dev": "Фронт-энд разработчик"
    },
    "signIn": {
        "signIn": "Войти",
        "e-mail": "Электронная почта:",
        "password": "Пароль:",
        "text": "Еше не зарегистрированы?",
        "signUp": "Зарегистрироваться",
        "error": "Не удалось войти с текущими учетными данными",
        "required": "Поле обязательно для входа",
        "e-mail-pl": "Пожалуйста, введите ваш электронный адрес",
        "password-pl": "Пожалуйста, введите ваш пароль"
    },
    "signUp": {
        "signUp": "Зарегистрироваться",
        "error": "Не удалось создать учётную запись",
        "e-mail": "Электронная почта:",
        "required": "Это обязательное поле для регистрации",
        "e-mail-pl": "Пожалуйста, введите ваш электронный адрес",
        "password": "Пароль:",
        "password-pl": "Пожалуйста, введите ваш пароль",
        "error-pswd": "Ваш пароль должен состоять минимум из 6 символов",
        "confirm": "Подтвердите пароль:",
        "confirm-pl": "Пожалуйста, подтвердите ваш пароль",
        "submit": "Отправить",
        "text": "Уже есть учетная запись?",
        "mismatch": "Пароли не совпали"
    }
}